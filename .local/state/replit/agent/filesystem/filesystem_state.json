{"file_contents":{"app.py":{"content":"import os\nfrom flask import Flask\nfrom flask_sqlalchemy import SQLAlchemy\nfrom sqlalchemy.orm import DeclarativeBase\nfrom werkzeug.middleware.proxy_fix import ProxyFix\nimport logging\n\n# Configure logging\nlogging.basicConfig(level=logging.DEBUG)\n\nclass Base(DeclarativeBase):\n    pass\n\ndb = SQLAlchemy(model_class=Base)\n\n# Create the app\napp = Flask(__name__)\napp.secret_key = os.environ.get(\"SESSION_SECRET\", \"dev-secret-key-change-in-production\")\napp.wsgi_app = ProxyFix(app.wsgi_app, x_proto=1, x_host=1)\n\n# Configure the database\ndatabase_url = os.environ.get(\"DATABASE_URL\")\nif not database_url:\n    # Use SQLite for local development\n    database_url = \"sqlite:///app.db\"\n    \napp.config[\"SQLALCHEMY_DATABASE_URI\"] = database_url\napp.config[\"SQLALCHEMY_ENGINE_OPTIONS\"] = {\n    \"pool_recycle\": 300,\n    \"pool_pre_ping\": True,\n}\n\n# Initialize the app with the extension\ndb.init_app(app)\n\nwith app.app_context():\n    # Import models here\n    import models  # noqa: F401\n    db.create_all()\n    logging.info(\"Database tables created\")\n    \n    # Create default admin user\n    from replit_auth import create_default_admin\n    create_default_admin()\n","size_bytes":1150},"main.py":{"content":"from app import app\nimport routes  # noqa: F401\n\nif __name__ == \"__main__\":\n    app.run(host=\"0.0.0.0\", port=5000, debug=True)\n","size_bytes":127},"migrate_db.py":{"content":"#!/usr/bin/env python3\n\"\"\"\nDatabase Migration Script\nHandles schema migration for the User table when switching to proper authentication\n\"\"\"\n\nimport os\nimport sqlite3\nimport logging\nfrom app import app, db\nfrom models import User\n\ndef migrate_database():\n    \"\"\"Migrate the database schema to support new authentication system\"\"\"\n    \n    # Database file path\n    db_file = 'app.db'\n    instance_db = os.path.join('instance', 'app.db')\n    \n    # Remove old database files if they exist\n    for db_path in [db_file, instance_db]:\n        if os.path.exists(db_path):\n            print(f\"Removing old database: {db_path}\")\n            os.remove(db_path)\n    \n    # Remove instance directory if it exists\n    if os.path.exists('instance'):\n        import shutil\n        shutil.rmtree('instance')\n        print(\"Removed instance directory\")\n    \n    print(\"Creating fresh database with new schema...\")\n    \n    # Create all tables with new schema\n    with app.app_context():\n        db.create_all()\n        print(\"Database tables created successfully\")\n        \n        # Create default admin user\n        admin = User.query.filter_by(email='admin@gmail.com').first()\n        if not admin:\n            admin = User(\n                email='admin@gmail.com',\n                first_name='System',\n                last_name='Administrator',\n                role='admin'\n            )\n            admin.set_password('admin')\n            db.session.add(admin)\n            db.session.commit()\n            print(\"✓ Default admin user created: admin@gmail.com / admin\")\n        else:\n            print(\"✓ Default admin user already exists\")\n    \n    print(\"Database migration completed successfully!\")\n\nif __name__ == \"__main__\":\n    migrate_database()","size_bytes":1743},"models.py":{"content":"from datetime import datetime\nfrom app import db\nfrom flask_dance.consumer.storage.sqla import OAuthConsumerMixin\nfrom flask_login import UserMixin\nfrom sqlalchemy import UniqueConstraint\n\n# User model for authentication\nclass User(UserMixin, db.Model):\n    __tablename__ = 'users'\n    id = db.Column(db.Integer, primary_key=True)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    password_hash = db.Column(db.String(256), nullable=False)\n    first_name = db.Column(db.String(100), nullable=True)\n    last_name = db.Column(db.String(100), nullable=True)\n    profile_image_url = db.Column(db.String, nullable=True)\n    role = db.Column(db.String(20), default='user')  # user, admin\n    factory_id = db.Column(db.String, nullable=True)\n    is_active = db.Column(db.Boolean, default=True)\n    \n    created_at = db.Column(db.DateTime, default=datetime.now)\n    updated_at = db.Column(db.DateTime, default=datetime.now, onupdate=datetime.now)\n    \n    def check_password(self, password):\n        \"\"\"Check if provided password matches user's password hash\"\"\"\n        from werkzeug.security import check_password_hash\n        return check_password_hash(self.password_hash, password)\n    \n    def set_password(self, password):\n        \"\"\"Set password hash from plain password\"\"\"\n        from werkzeug.security import generate_password_hash\n        self.password_hash = generate_password_hash(password)\n    \n    @property\n    def full_name(self):\n        \"\"\"Get user's full name\"\"\"\n        if self.first_name and self.last_name:\n            return f\"{self.first_name} {self.last_name}\"\n        elif self.first_name:\n            return self.first_name\n        else:\n            return self.email.split('@')[0]\n\n# OAuth model for Replit Auth\nclass OAuth(OAuthConsumerMixin, db.Model):\n    user_id = db.Column(db.String, db.ForeignKey(User.id))\n    browser_session_key = db.Column(db.String, nullable=False)\n    user = db.relationship(User)\n\n    __table_args__ = (UniqueConstraint(\n        'user_id',\n        'browser_session_key',\n        'provider',\n        name='uq_user_browser_session_key_provider',\n    ),)\n\n# Factory/Location model\nclass Factory(db.Model):\n    __tablename__ = 'factories'\n    id = db.Column(db.String, primary_key=True)\n    name = db.Column(db.String(200), nullable=False)\n    mobile_no = db.Column(db.String(20), nullable=True)\n    city = db.Column(db.String(100), nullable=True)\n    state = db.Column(db.String(100), nullable=True)\n    created_at = db.Column(db.DateTime, default=datetime.now)\n\n# Product model\nclass Product(db.Model):\n    __tablename__ = 'products'\n    id = db.Column(db.String, primary_key=True)\n    name = db.Column(db.String(200), nullable=False)\n    sku_id = db.Column(db.String(100), unique=True, nullable=False)\n    gtin = db.Column(db.String(50), nullable=True)\n    mrp = db.Column(db.Float, nullable=True)\n    registration_no = db.Column(db.String(100), nullable=True)\n    sap_description = db.Column(db.Text, nullable=True)\n    image_url = db.Column(db.String(500), nullable=True)\n    created_at = db.Column(db.DateTime, default=datetime.now)\n\n# Batch model\nclass Batch(db.Model):\n    __tablename__ = 'batches'\n    id = db.Column(db.String, primary_key=True)\n    batch_no = db.Column(db.String(100), nullable=False)\n    product_id = db.Column(db.String, db.ForeignKey('products.id'), nullable=False)\n    factory_id = db.Column(db.String, db.ForeignKey('factories.id'), nullable=False)\n    mfg_date = db.Column(db.Date, nullable=False)\n    expiry_date = db.Column(db.Date, nullable=False)\n    qa_status = db.Column(db.String(20), default='OK')  # OK, Rejected\n    responded_by = db.Column(db.String(100), nullable=True)\n    responded_date = db.Column(db.DateTime, nullable=True)\n    reject_reason = db.Column(db.Text, nullable=True)\n    created_at = db.Column(db.DateTime, default=datetime.now)\n    \n    product = db.relationship('Product', backref='batches')\n    factory = db.relationship('Factory', backref='batches')\n\n# Product QR Codes\nclass ProductCode(db.Model):\n    __tablename__ = 'product_codes'\n    id = db.Column(db.Integer, primary_key=True)\n    product_id = db.Column(db.String, db.ForeignKey('products.id'), nullable=False)\n    batch_id = db.Column(db.String, db.ForeignKey('batches.id'), nullable=False)\n    qr_code = db.Column(db.String(500), nullable=False)\n    mapped_codes = db.Column(db.Integer, default=0)\n    unmapped_codes = db.Column(db.Integer, default=0)\n    total_codes = db.Column(db.Integer, default=0)\n    created_at = db.Column(db.DateTime, default=datetime.now)\n    \n    product = db.relationship('Product', backref='product_codes')\n    batch = db.relationship('Batch', backref='product_codes')\n\n# First Level Inner Codes\nclass FirstLevelCode(db.Model):\n    __tablename__ = 'first_level_codes'\n    id = db.Column(db.Integer, primary_key=True)\n    product_id = db.Column(db.String, db.ForeignKey('products.id'), nullable=False)\n    batch_id = db.Column(db.String, db.ForeignKey('batches.id'), nullable=False)\n    qr_code = db.Column(db.String(500), nullable=True)\n    total_codes = db.Column(db.Integer, default=0)\n    mapped_codes = db.Column(db.Integer, default=0)\n    unmapped_codes = db.Column(db.Integer, default=0)\n    created_at = db.Column(db.DateTime, default=datetime.now)\n    \n    product = db.relationship('Product', backref='first_level_codes')\n    batch = db.relationship('Batch', backref='first_level_codes')\n\n# Second Level Inner Codes\nclass SecondLevelCode(db.Model):\n    __tablename__ = 'second_level_codes'\n    id = db.Column(db.Integer, primary_key=True)\n    product_id = db.Column(db.String, db.ForeignKey('products.id'), nullable=False)\n    batch_id = db.Column(db.String, db.ForeignKey('batches.id'), nullable=False)\n    qr_code = db.Column(db.String(500), nullable=True)\n    quantity = db.Column(db.Integer, default=0)\n    created_at = db.Column(db.DateTime, default=datetime.now)\n    \n    product = db.relationship('Product', backref='second_level_codes')\n    batch = db.relationship('Batch', backref='second_level_codes')\n\n# Shipper Codes\nclass ShipperCode(db.Model):\n    __tablename__ = 'shipper_codes'\n    id = db.Column(db.Integer, primary_key=True)\n    product_id = db.Column(db.String, db.ForeignKey('products.id'), nullable=False)\n    batch_id = db.Column(db.String, db.ForeignKey('batches.id'), nullable=False)\n    qr_code = db.Column(db.String(500), nullable=True)\n    total_codes = db.Column(db.Integer, default=0)\n    mapped_codes = db.Column(db.Integer, default=0)\n    unmapped_codes = db.Column(db.Integer, default=0)\n    gross_weight = db.Column(db.Float, default=0)\n    created_at = db.Column(db.DateTime, default=datetime.now)\n    \n    product = db.relationship('Product', backref='shipper_codes')\n    batch = db.relationship('Batch', backref='shipper_codes')\n\n# Stock model for inventory tracking\nclass Stock(db.Model):\n    __tablename__ = 'stock'\n    id = db.Column(db.Integer, primary_key=True)\n    product_id = db.Column(db.String, db.ForeignKey('products.id'), nullable=False)\n    batch_id = db.Column(db.String, db.ForeignKey('batches.id'), nullable=False)\n    factory_id = db.Column(db.String, db.ForeignKey('factories.id'), nullable=False)\n    units = db.Column(db.Integer, default=0)\n    bin_status = db.Column(db.String(20), default='OK')  # OK, intransit\n    updated_at = db.Column(db.DateTime, default=datetime.now, onupdate=datetime.now)\n    \n    product = db.relationship('Product', backref='stock_entries')\n    batch = db.relationship('Batch', backref='stock_entries')\n    factory = db.relationship('Factory', backref='stock_entries')\n","size_bytes":7583},"pyproject.toml":{"content":"[project]\nname = \"repl-nix-workspace\"\nversion = \"0.1.0\"\ndescription = \"Add your description here\"\nrequires-python = \">=3.11\"\ndependencies = [\n    \"email-validator>=2.2.0\",\n    \"flask-dance>=7.1.0\",\n    \"flask>=3.1.1\",\n    \"flask-sqlalchemy>=3.1.1\",\n    \"gunicorn>=23.0.0\",\n    \"psycopg2-binary>=2.9.10\",\n    \"flask-login>=0.6.3\",\n    \"oauthlib>=3.3.1\",\n    \"pyjwt>=2.10.1\",\n    \"qrcode>=8.2\",\n    \"pillow>=11.3.0\",\n    \"openpyxl>=3.1.5\",\n    \"sqlalchemy>=2.0.43\",\n    \"werkzeug>=3.1.3\",\n]\n","size_bytes":489},"routes.py":{"content":"from flask import render_template, request, redirect, url_for, flash, session, jsonify\nfrom flask_login import current_user\nfrom datetime import datetime, date\nfrom app import app, db\nfrom models import User, Factory, Product, Batch, ProductCode, FirstLevelCode, SecondLevelCode, ShipperCode, Stock\nfrom replit_auth import require_login, make_replit_blueprint\nfrom utils import generate_qr_code, generate_batch_id, generate_product_id, generate_factory_id, export_to_excel\n\napp.register_blueprint(make_replit_blueprint(), url_prefix=\"/auth\")\n\n@app.before_request\ndef make_session_permanent():\n    session.permanent = True\n\n@app.route('/')\ndef index():\n    if current_user.is_authenticated:\n        return redirect(url_for('dashboard'))\n    return render_template('index.html')\n\n@app.route('/dashboard')\n@require_login\ndef dashboard():\n    # Get dashboard statistics\n    total_products = Product.query.count()\n    total_batches = Batch.query.count()\n    total_factories = Factory.query.count()\n    \n    # Recent batches\n    recent_batches = Batch.query.order_by(Batch.created_at.desc()).limit(5).all()\n    \n    return render_template('dashboard.html', \n                         total_products=total_products,\n                         total_batches=total_batches,\n                         total_factories=total_factories,\n                         recent_batches=recent_batches)\n\n@app.route('/batch-management')\n@require_login\ndef batch_management():\n    page = request.args.get('page', 1, type=int)\n    product_filter = request.args.get('product_id', '')\n    \n    query = Batch.query\n    if product_filter:\n        query = query.filter(Batch.product_id == product_filter)\n    \n    batches = query.order_by(Batch.created_at.desc()).paginate(\n        page=page, per_page=10, error_out=False)\n    \n    products = Product.query.all()\n    factories = Factory.query.all()\n    \n    # Format today's date for batch number\n    today_formatted = datetime.now().strftime('%Y%m%d')\n    \n    return render_template('batch_management.html', \n                         batches=batches, \n                         products=products,\n                         factories=factories,\n                         product_filter=product_filter,\n                         today_formatted=today_formatted)\n\n@app.route('/add-batch', methods=['POST'])\n@require_login\ndef add_batch():\n    try:\n        batch_id = generate_batch_id()\n        batch = Batch(\n            id=batch_id,\n            batch_no=request.form['batch_no'],\n            product_id=request.form['product_id'],\n            factory_id=request.form['factory_id'],\n            mfg_date=datetime.strptime(request.form['mfg_date'], '%Y-%m-%d').date(),\n            expiry_date=datetime.strptime(request.form['expiry_date'], '%Y-%m-%d').date(),\n            qa_status=request.form.get('qa_status', 'OK'),\n            responded_by=current_user.first_name or current_user.email\n        )\n        db.session.add(batch)\n        db.session.commit()\n        flash('Batch added successfully!', 'success')\n    except Exception as e:\n        db.session.rollback()\n        flash(f'Error adding batch: {str(e)}', 'error')\n    \n    return redirect(url_for('batch_management'))\n\n@app.route('/product-codes')\n@require_login\ndef product_codes():\n    page = request.args.get('page', 1, type=int)\n    codes = ProductCode.query.order_by(ProductCode.created_at.desc()).paginate(\n        page=page, per_page=10, error_out=False)\n    \n    return render_template('product_codes.html', codes=codes)\n\n@app.route('/generate-product-codes')\n@require_login\ndef generate_product_codes_page():\n    products = Product.query.all()\n    batches = Batch.query.all()\n    return render_template('generate_product_codes.html', products=products, batches=batches)\n\n@app.route('/generate-codes', methods=['POST'])\n@require_login\ndef generate_codes():\n    try:\n        product_id = request.form['product_id']\n        batch_id = request.form['batch_id']\n        quantity = int(request.form['quantity'])\n        rejection_percentage = float(request.form.get('rejection_percentage', 0))\n        \n        # Calculate codes\n        total_codes = quantity\n        rejected_codes = int(quantity * rejection_percentage / 100)\n        mapped_codes = total_codes - rejected_codes\n        \n        # Get product and batch for QR code generation\n        from utils import generate_scannable_qr_data\n        product = Product.query.get(product_id)\n        batch = Batch.query.get(batch_id)\n        \n        # Generate structured QR code data with URL for external scanning\n        base_url = request.url_root.rstrip('/')\n        qr_data = generate_scannable_qr_data(\n            \"PRODUCT\",\n            product,\n            batch,\n            {\"total_codes\": total_codes, \"rejection_percentage\": rejection_percentage},\n            base_url\n        )\n        \n        product_code = ProductCode(\n            product_id=product_id,\n            batch_id=batch_id,\n            qr_code=qr_data,\n            total_codes=total_codes,\n            mapped_codes=mapped_codes,\n            unmapped_codes=rejected_codes\n        )\n        \n        db.session.add(product_code)\n        db.session.commit()\n        \n        flash(f'Generated {total_codes} product codes successfully!', 'success')\n    except Exception as e:\n        db.session.rollback()\n        flash(f'Error generating codes: {str(e)}', 'error')\n    \n    return redirect(url_for('product_codes'))\n\n@app.route('/first-level-codes')\n@require_login\ndef first_level_codes():\n    page = request.args.get('page', 1, type=int)\n    codes = FirstLevelCode.query.order_by(FirstLevelCode.created_at.desc()).paginate(\n        page=page, per_page=10, error_out=False)\n    \n    return render_template('first_level_codes.html', codes=codes)\n\n@app.route('/generate-first-level')\n@require_login\ndef generate_first_level_page():\n    products = Product.query.all()\n    batches = Batch.query.all()\n    return render_template('generate_first_level.html', products=products, batches=batches)\n\n@app.route('/generate-first-level-codes', methods=['POST'])\n@require_login\ndef generate_first_level_codes():\n    try:\n        product_id = request.form['product_id']\n        batch_id = request.form['batch_id']\n        quantity = int(request.form['quantity'])\n        \n        # Get product and batch for QR code generation\n        from utils import generate_scannable_qr_data\n        product = Product.query.get(product_id)\n        batch = Batch.query.get(batch_id)\n        \n        # Generate structured QR code data with URL for external scanning\n        base_url = request.url_root.rstrip('/')\n        qr_data = generate_scannable_qr_data(\n            \"FIRST_LEVEL\",\n            product,\n            batch,\n            {\"quantity\": quantity},\n            base_url\n        )\n        \n        first_level_code = FirstLevelCode(\n            product_id=product_id,\n            batch_id=batch_id,\n            qr_code=qr_data,\n            total_codes=quantity,\n            mapped_codes=quantity,\n            unmapped_codes=0\n        )\n        \n        db.session.add(first_level_code)\n        db.session.commit()\n        \n        flash(f'Generated {quantity} first level codes successfully!', 'success')\n    except Exception as e:\n        db.session.rollback()\n        flash(f'Error generating first level codes: {str(e)}', 'error')\n    \n    return redirect(url_for('first_level_codes'))\n\n@app.route('/second-level-codes')\n@require_login\ndef second_level_codes():\n    page = request.args.get('page', 1, type=int)\n    codes = SecondLevelCode.query.order_by(SecondLevelCode.created_at.desc()).paginate(\n        page=page, per_page=10, error_out=False)\n    \n    return render_template('second_level_codes.html', codes=codes)\n\n@app.route('/generate-second-level')\n@require_login\ndef generate_second_level_page():\n    products = Product.query.all()\n    batches = Batch.query.all()\n    return render_template('generate_second_level.html', products=products, batches=batches)\n\n@app.route('/generate-second-level-codes', methods=['POST'])\n@require_login\ndef generate_second_level_codes():\n    try:\n        product_id = request.form['product_id']\n        batch_id = request.form['batch_id']\n        quantity = int(request.form['quantity'])\n        \n        # Get product and batch for QR code generation\n        from utils import generate_scannable_qr_data\n        product = Product.query.get(product_id)\n        batch = Batch.query.get(batch_id)\n        \n        # Generate structured QR code data with URL for external scanning\n        base_url = request.url_root.rstrip('/')\n        qr_data = generate_scannable_qr_data(\n            \"SECOND_LEVEL\",\n            product,\n            batch,\n            {\"quantity\": quantity},\n            base_url\n        )\n        \n        second_level_code = SecondLevelCode(\n            product_id=product_id,\n            batch_id=batch_id,\n            qr_code=qr_data,\n            quantity=quantity\n        )\n        \n        db.session.add(second_level_code)\n        db.session.commit()\n        \n        flash(f'Generated {quantity} second level codes successfully!', 'success')\n    except Exception as e:\n        db.session.rollback()\n        flash(f'Error generating second level codes: {str(e)}', 'error')\n    \n    return redirect(url_for('second_level_codes'))\n\n@app.route('/shipper-codes')\n@require_login\ndef shipper_codes():\n    page = request.args.get('page', 1, type=int)\n    codes = ShipperCode.query.order_by(ShipperCode.created_at.desc()).paginate(\n        page=page, per_page=10, error_out=False)\n    \n    return render_template('shipper_codes.html', codes=codes)\n\n@app.route('/generate-shipper-codes', methods=['POST'])\n@require_login\ndef generate_shipper_codes():\n    try:\n        product_id = request.form['product_id']\n        batch_id = request.form['batch_id']\n        quantity = int(request.form['quantity'])\n        gross_weight = float(request.form.get('gross_weight', 0))\n        \n        # Calculate mapped and unmapped codes (for demo purposes)\n        mapped_codes = quantity - 1 if quantity > 1 else quantity\n        unmapped_codes = 1 if quantity > 1 else 0\n        \n        # Get product and batch for QR code generation\n        from utils import generate_scannable_qr_data\n        product = Product.query.get(product_id)\n        batch = Batch.query.get(batch_id)\n        \n        # Generate structured QR code data with URL for external scanning\n        base_url = request.url_root.rstrip('/')\n        qr_data = generate_scannable_qr_data(\n            \"SHIPPER\",\n            product,\n            batch,\n            {\"quantity\": quantity, \"gross_weight\": gross_weight},\n            base_url\n        )\n        \n        shipper_code = ShipperCode(\n            product_id=product_id,\n            batch_id=batch_id,\n            qr_code=qr_data,\n            total_codes=quantity,\n            mapped_codes=mapped_codes,\n            unmapped_codes=unmapped_codes,\n            gross_weight=gross_weight\n        )\n        \n        db.session.add(shipper_code)\n        db.session.commit()\n        \n        flash(f'Generated {quantity} shipper codes successfully!', 'success')\n    except Exception as e:\n        db.session.rollback()\n        flash(f'Error generating shipper codes: {str(e)}', 'error')\n    \n    return redirect(url_for('shipper_codes'))\n\n@app.route('/stock-report')\n@require_login\ndef stock_report():\n    page = request.args.get('page', 1, type=int)\n    factories = Factory.query.order_by(Factory.name).paginate(\n        page=page, per_page=10, error_out=False)\n    \n    return render_template('stock_report.html', factories=factories)\n\n@app.route('/stock-detail/<factory_id>')\n@require_login\ndef stock_detail(factory_id):\n    page = request.args.get('page', 1, type=int)\n    factory = Factory.query.get_or_404(factory_id)\n    \n    stock_items = Stock.query.filter_by(factory_id=factory_id).paginate(\n        page=page, per_page=10, error_out=False)\n    \n    return render_template('stock_detail.html', factory=factory, stock_items=stock_items)\n\n@app.route('/batch-detail/<product_id>')\n@require_login\ndef batch_detail(product_id):\n    page = request.args.get('page', 1, type=int)\n    product = Product.query.get_or_404(product_id)\n    \n    batches = Batch.query.filter_by(product_id=product_id).paginate(\n        page=page, per_page=10, error_out=False)\n    \n    return render_template('batch_detail.html', product=product, batches=batches)\n\n@app.route('/export-codes/<int:code_id>')\n@require_login\ndef export_codes(code_id):\n    code = ProductCode.query.get_or_404(code_id)\n    \n    data = [\n        [code.product.name, code.product.sku_id, code.batch.batch_no, \n         code.total_codes, code.mapped_codes, code.unmapped_codes]\n    ]\n    \n    headers = ['Product Name', 'SKU ID', 'Batch No', 'Total Codes', 'Mapped Codes', 'Unmapped Codes']\n    \n    return export_to_excel(data, f'product_codes_{code_id}.xlsx', headers)\n\n@app.route('/export-batch-stock/<batch_id>')\n@require_login\ndef export_batch_stock(batch_id):\n    batch = Batch.query.get_or_404(batch_id)\n    stock_items = Stock.query.filter_by(batch_id=batch_id).all()\n    \n    data = []\n    for stock in stock_items:\n        data.append([\n            batch.batch_no,\n            stock.product.name if stock.product else 'N/A',\n            stock.product.sku_id if stock.product else 'N/A',\n            stock.units,\n            stock.bin_status,\n            stock.factory.name if stock.factory else 'N/A'\n        ])\n    \n    headers = ['Batch No', 'Product Name', 'SKU ID', 'Units', 'Bin Status', 'Factory']\n    \n    return export_to_excel(data, f'batch_stock_{batch_id}.xlsx', headers)\n\n@app.route('/add-product', methods=['POST'])\n@require_login\ndef add_product():\n    try:\n        product_id = generate_product_id()\n        \n        # Handle image upload\n        image_url = None\n        if 'product_image' in request.files:\n            from utils import save_uploaded_image\n            image_file = request.files['product_image']\n            image_url = save_uploaded_image(image_file, product_id)\n        \n        product = Product(\n            id=product_id,\n            name=request.form['name'],\n            sku_id=request.form['sku_id'],\n            gtin=request.form.get('gtin'),\n            mrp=float(request.form['mrp']) if request.form.get('mrp') else None,\n            registration_no=request.form.get('registration_no'),\n            sap_description=request.form.get('sap_description'),\n            image_url=image_url\n        )\n        db.session.add(product)\n        db.session.commit()\n        flash('Product added successfully!', 'success')\n    except Exception as e:\n        db.session.rollback()\n        flash(f'Error adding product: {str(e)}', 'error')\n    \n    return redirect(url_for('dashboard'))\n\n@app.route('/add-factory', methods=['POST'])\n@require_login\ndef add_factory():\n    try:\n        factory_id = generate_factory_id()\n        factory = Factory(\n            id=factory_id,\n            name=request.form['name'],\n            mobile_no=request.form.get('mobile_no'),\n            city=request.form.get('city'),\n            state=request.form.get('state')\n        )\n        db.session.add(factory)\n        db.session.commit()\n        flash('Factory added successfully!', 'success')\n    except Exception as e:\n        db.session.rollback()\n        flash(f'Error adding factory: {str(e)}', 'error')\n    \n    return redirect(url_for('dashboard'))\n\n# QR Code display routes\n@app.route('/show-qr/<code_type>/<int:code_id>')\n@require_login\ndef show_qr_code(code_type, code_id):\n    from utils import generate_qr_code\n    \n    if code_type == 'product':\n        code = ProductCode.query.get_or_404(code_id)\n    elif code_type == 'first_level':\n        code = FirstLevelCode.query.get_or_404(code_id)\n    elif code_type == 'second_level':\n        code = SecondLevelCode.query.get_or_404(code_id)\n    elif code_type == 'shipper':\n        code = ShipperCode.query.get_or_404(code_id)\n    else:\n        flash('Invalid code type', 'error')\n        return redirect(url_for('dashboard'))\n    \n    qr_image = generate_qr_code(code.qr_code)\n    \n    return jsonify({\n        'qr_image': qr_image,\n        'qr_data': code.qr_code\n    })\n\n# QR Code Scanner Page\n@app.route('/scan')\ndef scan_qr():\n    # Check if data is provided as URL parameter (for external scanners)\n    qr_data = request.args.get('data')\n    if qr_data:\n        from urllib.parse import unquote\n        import json\n        try:\n            decoded_data = unquote(qr_data)\n            # Try to parse as JSON to validate\n            parsed_data = json.loads(decoded_data)\n            return render_template('scan_qr.html', qr_data=decoded_data, parsed_data=parsed_data)\n        except json.JSONDecodeError:\n            flash('Invalid QR code data format', 'error')\n            return render_template('scan_qr.html')\n    return render_template('scan_qr.html')\n\n# Public QR Code Scanner (for external scanning) - legacy support\n@app.route('/scan/<path:qr_data>')\ndef scan_qr_with_data(qr_data):\n    from urllib.parse import unquote\n    import json\n    try:\n        decoded_data = unquote(qr_data)\n        parsed_data = json.loads(decoded_data)\n        return render_template('scan_qr.html', qr_data=decoded_data, parsed_data=parsed_data)\n    except json.JSONDecodeError:\n        flash('Invalid QR code data format', 'error')\n        return render_template('scan_qr.html')\n\n# API endpoint for QR code validation and parsing\n@app.route('/api/parse-qr', methods=['POST'])\ndef parse_qr_code():\n    \"\"\"API endpoint to parse QR code data and return product information\"\"\"\n    import json\n    try:\n        qr_text = request.json.get('qr_data', '').strip()\n        \n        # Handle different QR code formats\n        if qr_text.startswith('http'):\n            # Extract data from URL\n            if '/scan?data=' in qr_text:\n                from urllib.parse import unquote, urlparse, parse_qs\n                parsed_url = urlparse(qr_text)\n                qr_data = parse_qs(parsed_url.query).get('data', [''])[0]\n                qr_text = unquote(qr_data)\n            # Check for fragment (fallback data)\n            elif '#' in qr_text:\n                qr_text = qr_text.split('#')[1]\n        \n        # Parse JSON data\n        try:\n            qr_data = json.loads(qr_text)\n        except json.JSONDecodeError:\n            return jsonify({'error': 'Invalid QR code format'}), 400\n        \n        # Validate required fields\n        required_fields = ['type', 'product_id', 'batch_id']\n        if not all(field in qr_data for field in required_fields):\n            return jsonify({'error': 'QR code missing required product information'}), 400\n        \n        # Get additional product and batch info from database\n        product = Product.query.get(qr_data['product_id'])\n        batch = Batch.query.get(qr_data['batch_id'])\n        \n        if not product or not batch:\n            return jsonify({'error': 'Product or batch not found in database'}), 404\n        \n        # Enhance QR data with current database info\n        enhanced_data = qr_data.copy()\n        enhanced_data.update({\n            'current_product_name': product.name,\n            'current_batch_status': batch.qa_status,\n            'factory_name': batch.factory.name if batch.factory else 'Unknown',\n            'scan_timestamp': datetime.now().isoformat(),\n            'data_source': 'database_verified'\n        })\n        \n        return jsonify({\n            'success': True,\n            'data': enhanced_data,\n            'message': 'QR code parsed successfully'\n        })\n        \n    except Exception as e:\n        return jsonify({'error': f'Failed to parse QR code: {str(e)}'}), 500\n\n# API endpoints for dynamic data\n@app.route('/api/batches/<product_id>')\n@require_login\ndef get_batches_by_product(product_id):\n    batches = Batch.query.filter_by(product_id=product_id).all()\n    return jsonify([{\n        'id': batch.id,\n        'batch_no': batch.batch_no,\n        'mfg_date': batch.mfg_date.strftime('%Y-%m-%d'),\n        'expiry_date': batch.expiry_date.strftime('%Y-%m-%d')\n    } for batch in batches])\n\n@app.route('/api/products')\n@require_login\ndef get_products():\n    products = Product.query.all()\n    return jsonify([{\n        'id': product.id,\n        'name': product.name,\n        'sku_id': product.sku_id\n    } for product in products])\n","size_bytes":20319},"utils.py":{"content":"import qrcode\nfrom io import BytesIO\nimport base64\nfrom datetime import datetime\nimport uuid\nimport openpyxl\nfrom openpyxl.styles import Font, PatternFill\nfrom flask import make_response\n\ndef generate_qr_code(data):\n    \"\"\"Generate QR code and return as base64 encoded string\"\"\"\n    qr = qrcode.QRCode(\n        version=3,  # Increased version for better scanning\n        error_correction=qrcode.constants.ERROR_CORRECT_M,  # Medium error correction\n        box_size=8,  # Optimal size for scanning\n        border=4,\n    )\n    qr.add_data(data)\n    qr.make(fit=True)\n    \n    img = qr.make_image(fill_color=\"black\", back_color=\"white\")\n    buffered = BytesIO()\n    img.save(buffered, format=\"PNG\")\n    img_str = base64.b64encode(buffered.getvalue()).decode()\n    return f\"data:image/png;base64,{img_str}\"\n\ndef generate_scannable_qr_data(code_type, product, batch, additional_data=None, base_url=\"\"):\n    \"\"\"Generate structured QR code data that's easily scannable\"\"\"\n    import json\n    from urllib.parse import quote\n    \n    qr_data = {\n        \"type\": code_type,\n        \"product_id\": product.id,\n        \"product_name\": product.name,\n        \"sku_id\": product.sku_id,\n        \"batch_id\": batch.id,\n        \"batch_no\": batch.batch_no,\n        \"mfg_date\": batch.mfg_date.strftime('%Y-%m-%d'),\n        \"expiry_date\": batch.expiry_date.strftime('%Y-%m-%d'),\n        \"timestamp\": datetime.now().strftime('%Y%m%d%H%M%S'),\n        \"image_url\": product.image_url if product.image_url else None,\n        \"mrp\": product.mrp if product.mrp else None,\n        \"gtin\": product.gtin if product.gtin else None,\n        \"registration_no\": product.registration_no if product.registration_no else None,\n        \"factory_name\": batch.factory.name if batch.factory else None,\n        \"qa_status\": batch.qa_status\n    }\n    \n    if additional_data:\n        qr_data.update(additional_data)\n    \n    # Create a comprehensive QR code that works both as URL and standalone data\n    json_data = json.dumps(qr_data, separators=(',', ':'))\n    \n    # For external scanners, generate a direct URL to the product details\n    if base_url:\n        encoded_data = quote(json_data)\n        # Create a URL that also contains the raw data as a fallback\n        return f\"{base_url}/scan?data={encoded_data}#{json_data}\"\n    \n    return json_data\n\ndef save_uploaded_image(file, product_id):\n    \"\"\"Save uploaded image and return the URL\"\"\"\n    import os\n    from werkzeug.utils import secure_filename\n    \n    if file and file.filename:\n        filename = secure_filename(file.filename)\n        # Create unique filename with product ID\n        file_extension = filename.rsplit('.', 1)[1].lower() if '.' in filename else 'jpg'\n        unique_filename = f\"{product_id}_{datetime.now().strftime('%Y%m%d_%H%M%S')}.{file_extension}\"\n        \n        # Create uploads directory if it doesn't exist\n        upload_dir = os.path.join(os.getcwd(), 'static', 'uploads')\n        os.makedirs(upload_dir, exist_ok=True)\n        \n        file_path = os.path.join(upload_dir, unique_filename)\n        file.save(file_path)\n        \n        # Return relative URL\n        return f\"/static/uploads/{unique_filename}\"\n    return None\n\ndef generate_batch_id():\n    \"\"\"Generate unique batch ID\"\"\"\n    return f\"BATCH{datetime.now().strftime('%Y%m%d')}{uuid.uuid4().hex[:6].upper()}\"\n\ndef generate_product_id():\n    \"\"\"Generate unique product ID\"\"\"\n    return f\"PROD{datetime.now().strftime('%Y%m%d')}{uuid.uuid4().hex[:6].upper()}\"\n\ndef generate_factory_id():\n    \"\"\"Generate unique factory ID\"\"\"\n    return f\"FAC{datetime.now().strftime('%Y%m%d')}{uuid.uuid4().hex[:6].upper()}\"\n\ndef export_to_excel(data, filename, headers):\n    \"\"\"Export data to Excel format\"\"\"\n    wb = openpyxl.Workbook()\n    ws = wb.active\n    \n    # Add headers\n    for col, header in enumerate(headers, 1):\n        cell = ws.cell(row=1, column=col, value=header)\n        cell.font = Font(bold=True, color=\"FFFFFF\")\n        cell.fill = PatternFill(start_color=\"7B2CBF\", end_color=\"7B2CBF\", fill_type=\"solid\")\n    \n    # Add data\n    for row, item in enumerate(data, 2):\n        for col, value in enumerate(item, 1):\n            ws.cell(row=row, column=col, value=value)\n    \n    # Auto-adjust column widths\n    for column in ws.columns:\n        max_length = 0\n        column_letter = column[0].column_letter\n        for cell in column:\n            try:\n                if len(str(cell.value)) > max_length:\n                    max_length = len(str(cell.value))\n            except:\n                pass\n        adjusted_width = min(max_length + 2, 50)\n        ws.column_dimensions[column_letter].width = adjusted_width\n    \n    # Create response\n    output = BytesIO()\n    wb.save(output)\n    output.seek(0)\n    \n    response = make_response(output.getvalue())\n    response.headers['Content-Type'] = 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'\n    response.headers['Content-Disposition'] = f'attachment; filename={filename}'\n    \n    return response\n","size_bytes":4989},"static/css/style.css":{"content":":root {\n    --primary-color: #7B2CBF;\n    --primary-dark: #6A1B99;\n    --primary-light: #9D4EDD;\n    --secondary-color: #E0AAFF;\n    --light-purple: #F3E8FF;\n    --dark-bg: #2D1B69;\n    --sidebar-width: 280px;\n}\n\n/* Base Styles */\nbody {\n    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\n    background-color: #f8f9fa;\n    margin: 0;\n    padding: 0;\n}\n\n/* Layout Wrapper */\n.wrapper {\n    display: flex;\n    min-height: 100vh;\n}\n\n/* Sidebar Styles */\n.sidebar {\n    width: var(--sidebar-width);\n    background: linear-gradient(180deg, var(--primary-color) 0%, var(--primary-dark) 100%);\n    position: fixed;\n    top: 0;\n    left: 0;\n    height: 100vh;\n    overflow-y: auto;\n    transition: all 0.3s ease;\n    z-index: 1000;\n    box-shadow: 2px 0 10px rgba(0, 0, 0, 0.1);\n}\n\n.sidebar.collapsed {\n    margin-left: -var(--sidebar-width);\n}\n\n.sidebar-header {\n    padding: 1.5rem;\n    border-bottom: 1px solid rgba(255, 255, 255, 0.1);\n}\n\n.sidebar-header h4 {\n    color: white;\n    margin: 0;\n    font-weight: 600;\n    font-size: 1.5rem;\n}\n\n/* Sidebar Menu */\n.sidebar-menu {\n    list-style: none;\n    padding: 0;\n    margin: 1rem 0;\n}\n\n.sidebar-section {\n    padding: 1rem 1.5rem 0.5rem;\n    color: rgba(255, 255, 255, 0.8);\n    font-size: 0.85rem;\n    font-weight: 600;\n    text-transform: uppercase;\n    letter-spacing: 0.5px;\n    display: flex;\n    align-items: center;\n    border-bottom: 1px solid rgba(255, 255, 255, 0.1);\n    margin-bottom: 0.5rem;\n}\n\n.sidebar-section i {\n    margin-right: 0.5rem;\n    font-size: 0.9rem;\n}\n\n.menu-item {\n    margin: 0;\n}\n\n.menu-item a {\n    display: flex;\n    align-items: center;\n    padding: 0.75rem 1.5rem;\n    color: rgba(255, 255, 255, 0.9);\n    text-decoration: none;\n    transition: all 0.3s ease;\n    border-left: 3px solid transparent;\n}\n\n.menu-item a:hover {\n    background-color: rgba(255, 255, 255, 0.1);\n    color: white;\n    border-left-color: var(--secondary-color);\n}\n\n.menu-item.active a {\n    background-color: rgba(255, 255, 255, 0.15);\n    color: white;\n    border-left-color: white;\n}\n\n.menu-item a i {\n    margin-right: 0.75rem;\n    width: 20px;\n    text-align: center;\n    font-size: 1rem;\n}\n\n/* Main Content */\n.main-content {\n    flex: 1;\n    margin-left: var(--sidebar-width);\n    transition: all 0.3s ease;\n    min-height: 100vh;\n}\n\n.main-content.expanded {\n    margin-left: 0;\n}\n\n/* Top Navigation */\n.navbar {\n    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\n    padding: 0.75rem 1.5rem;\n}\n\n.navbar .btn-link {\n    color: var(--primary-color);\n    border: none;\n    padding: 0.5rem;\n    font-size: 1.2rem;\n}\n\n.navbar .btn-link:hover {\n    color: var(--primary-dark);\n}\n\n/* Page Header */\n.page-header {\n    background: linear-gradient(135deg, var(--primary-color) 0%, var(--primary-light) 100%);\n    padding: 2rem 1.5rem;\n    margin: -0.75rem -1.5rem 0;\n    border-radius: 0 0 15px 15px;\n    box-shadow: 0 4px 15px rgba(123, 44, 191, 0.2);\n}\n\n.page-header h1 {\n    font-size: 1.75rem;\n    font-weight: 600;\n    margin-bottom: 0.25rem;\n}\n\n/* Content Wrapper */\n.content-wrapper {\n    padding: 1.5rem;\n}\n\n/* Cards */\n.card {\n    border: none;\n    border-radius: 12px;\n    box-shadow: 0 2px 15px rgba(0, 0, 0, 0.08);\n    transition: all 0.3s ease;\n}\n\n.card:hover {\n    box-shadow: 0 4px 25px rgba(0, 0, 0, 0.12);\n    transform: translateY(-2px);\n}\n\n.card-header {\n    background: white !important;\n    border-bottom: 1px solid #e9ecef;\n    border-radius: 12px 12px 0 0 !important;\n    padding: 1.25rem;\n}\n\n.card-body {\n    padding: 1.5rem;\n}\n\n/* Statistics Cards */\n.stat-card {\n    background: white;\n    border-radius: 12px;\n    transition: all 0.3s ease;\n    height: 100%;\n}\n\n.stat-card:hover {\n    transform: translateY(-5px);\n    box-shadow: 0 8px 30px rgba(0, 0, 0, 0.15);\n}\n\n.stat-icon {\n    width: 60px;\n    height: 60px;\n    border-radius: 12px;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    color: white;\n    font-size: 1.5rem;\n    flex-shrink: 0;\n}\n\n.stat-icon.bg-primary {\n    background: linear-gradient(135deg, var(--primary-color) 0%, var(--primary-light) 100%);\n}\n\n.stat-icon.bg-success {\n    background: linear-gradient(135deg, #198754 0%, #20c997 100%);\n}\n\n.stat-icon.bg-info {\n    background: linear-gradient(135deg, #0dcaf0 0%, #0d6efd 100%);\n}\n\n.stat-icon.bg-warning {\n    background: linear-gradient(135deg, #ffc107 0%, #fd7e14 100%);\n}\n\n/* Tables */\n.table {\n    margin-bottom: 0;\n}\n\n.table-purple thead th {\n    background: var(--primary-color);\n    color: white;\n    border: none;\n    font-weight: 600;\n    text-transform: uppercase;\n    font-size: 0.85rem;\n    letter-spacing: 0.5px;\n    padding: 1rem 0.75rem;\n}\n\n.table tbody tr {\n    transition: all 0.2s ease;\n}\n\n.table tbody tr:hover {\n    background-color: rgba(123, 44, 191, 0.05);\n}\n\n.table td {\n    vertical-align: middle;\n    padding: 0.875rem 0.75rem;\n    border-bottom: 1px solid #e9ecef;\n}\n\n/* Buttons */\n.btn {\n    border-radius: 8px;\n    font-weight: 500;\n    transition: all 0.3s ease;\n    padding: 0.5rem 1rem;\n}\n\n.btn-primary {\n    background: linear-gradient(135deg, var(--primary-color) 0%, var(--primary-light) 100%);\n    border: none;\n    color: white;\n}\n\n.btn-primary:hover {\n    background: linear-gradient(135deg, var(--primary-dark) 0%, var(--primary-color) 100%);\n    transform: translateY(-1px);\n    box-shadow: 0 6px 20px rgba(123, 44, 191, 0.3);\n}\n\n.btn-outline-primary {\n    color: var(--primary-color);\n    border-color: var(--primary-color);\n}\n\n.btn-outline-primary:hover {\n    background-color: var(--primary-color);\n    border-color: var(--primary-color);\n    color: white;\n}\n\n.btn-light {\n    background-color: white;\n    border-color: white;\n    color: var(--primary-color);\n}\n\n.btn-light:hover {\n    background-color: #f8f9fa;\n    color: var(--primary-dark);\n}\n\n.btn-outline-light {\n    color: white;\n    border-color: rgba(255, 255, 255, 0.5);\n}\n\n.btn-outline-light:hover {\n    background-color: white;\n    color: var(--primary-color);\n}\n\n/* Badges */\n.badge {\n    font-weight: 500;\n    padding: 0.5em 0.75em;\n    border-radius: 6px;\n}\n\n/* Forms */\n.form-control, .form-select {\n    border: 1px solid #ddd;\n    border-radius: 8px;\n    padding: 0.625rem 0.875rem;\n    transition: all 0.3s ease;\n}\n\n.form-control:focus, .form-select:focus {\n    border-color: var(--primary-color);\n    box-shadow: 0 0 0 0.2rem rgba(123, 44, 191, 0.15);\n}\n\n.form-label {\n    font-weight: 500;\n    color: #495057;\n    margin-bottom: 0.5rem;\n}\n\n/* Pagination */\n.pagination .page-link {\n    color: var(--primary-color);\n    border-color: #dee2e6;\n    padding: 0.5rem 0.75rem;\n}\n\n.pagination .page-item.active .page-link {\n    background-color: var(--primary-color);\n    border-color: var(--primary-color);\n}\n\n.pagination .page-link:hover {\n    color: var(--primary-dark);\n    background-color: rgba(123, 44, 191, 0.1);\n}\n\n/* Modals */\n.modal-content {\n    border: none;\n    border-radius: 15px;\n    box-shadow: 0 10px 40px rgba(0, 0, 0, 0.15);\n}\n\n.modal-header {\n    border-bottom: 1px solid #e9ecef;\n    border-radius: 15px 15px 0 0;\n    background: linear-gradient(135deg, var(--primary-color) 0%, var(--primary-light) 100%);\n    color: white;\n}\n\n.modal-header .btn-close {\n    filter: invert(1);\n}\n\n.modal-title {\n    font-weight: 600;\n}\n\n/* Alerts */\n.alert {\n    border: none;\n    border-radius: 10px;\n    padding: 1rem 1.25rem;\n}\n\n.alert-success {\n    background-color: #d1edcc;\n    color: #0f5132;\n}\n\n.alert-danger {\n    background-color: #f8d7da;\n    color: #721c24;\n}\n\n/* Responsive Design */\n@media (max-width: 768px) {\n    .sidebar {\n        margin-left: -var(--sidebar-width);\n    }\n    \n    .sidebar.show {\n        margin-left: 0;\n    }\n    \n    .main-content {\n        margin-left: 0;\n    }\n    \n    .page-header {\n        margin: -0.75rem -1rem 0;\n        padding: 1.5rem 1rem;\n    }\n    \n    .content-wrapper {\n        padding: 1rem;\n    }\n    \n    .stat-card {\n        margin-bottom: 1rem;\n    }\n}\n\n/* Custom Scrollbar */\n.sidebar::-webkit-scrollbar {\n    width: 6px;\n}\n\n.sidebar::-webkit-scrollbar-track {\n    background: rgba(255, 255, 255, 0.1);\n}\n\n.sidebar::-webkit-scrollbar-thumb {\n    background: rgba(255, 255, 255, 0.3);\n    border-radius: 3px;\n}\n\n.sidebar::-webkit-scrollbar-thumb:hover {\n    background: rgba(255, 255, 255, 0.5);\n}\n\n/* Info Sections */\n.info-section {\n    padding: 2rem 1rem;\n}\n\n.info-section i {\n    opacity: 0.8;\n}\n\n.info-section h5 {\n    font-weight: 600;\n    margin-bottom: 1rem;\n}\n\n.feature-item {\n    transition: all 0.3s ease;\n    padding: 1.5rem;\n    border-radius: 10px;\n}\n\n.feature-item:hover {\n    background-color: rgba(123, 44, 191, 0.05);\n    transform: translateY(-3px);\n}\n\n/* Loading States */\n.btn:disabled {\n    opacity: 0.6;\n    cursor: not-allowed;\n}\n\n/* Animation Classes */\n@keyframes fadeInUp {\n    from {\n        opacity: 0;\n        transform: translateY(30px);\n    }\n    to {\n        opacity: 1;\n        transform: translateY(0);\n    }\n}\n\n.fade-in-up {\n    animation: fadeInUp 0.6s ease-out;\n}\n\n/* Print Styles */\n@media print {\n    .sidebar,\n    .navbar,\n    .page-header,\n    .btn,\n    .pagination {\n        display: none !important;\n    }\n    \n    .main-content {\n        margin-left: 0 !important;\n    }\n    \n    .card {\n        box-shadow: none !important;\n        border: 1px solid #ddd !important;\n    }\n}\n","size_bytes":9282},"static/js/main.js":{"content":"// Main JavaScript file for TrustTags application\n\ndocument.addEventListener('DOMContentLoaded', function() {\n    // Initialize sidebar toggle\n    initializeSidebarToggle();\n\n    // Initialize DataTables\n    initializeDataTables();\n\n    // Initialize tooltips\n    initializeTooltips();\n\n    // Initialize form validation\n    initializeFormValidation();\n\n    // Initialize search functionality\n    initializeSearch();\n\n    // Initialize animations\n    initializeAnimations();\n});\n\n/**\n * Initialize sidebar toggle functionality\n */\nfunction initializeSidebarToggle() {\n    const sidebarToggle = document.getElementById('sidebarToggle');\n    const sidebar = document.getElementById('sidebar');\n    const mainContent = document.getElementById('main-content');\n\n    if (sidebarToggle && sidebar && mainContent) {\n        sidebarToggle.addEventListener('click', function() {\n            // Toggle sidebar visibility\n            sidebar.classList.toggle('collapsed');\n            mainContent.classList.toggle('expanded');\n\n            // Store sidebar state in localStorage\n            const isCollapsed = sidebar.classList.contains('collapsed');\n            localStorage.setItem('sidebarCollapsed', isCollapsed);\n        });\n\n        // Restore sidebar state from localStorage\n        const savedState = localStorage.getItem('sidebarCollapsed');\n        if (savedState === 'true') {\n            sidebar.classList.add('collapsed');\n            mainContent.classList.add('expanded');\n        }\n    }\n\n    // Handle mobile sidebar toggle\n    const mobileToggle = document.querySelector('[data-bs-toggle=\"collapse\"]');\n    if (mobileToggle && window.innerWidth <= 768) {\n        mobileToggle.addEventListener('click', function() {\n            sidebar.classList.toggle('show');\n        });\n    }\n}\n\n/**\n * Initialize DataTables for enhanced table functionality\n */\nfunction initializeDataTables() {\n    // Check if DataTables is loaded\n    if (typeof $.fn.DataTable !== 'undefined') {\n        // Initialize DataTables on tables with specific classes\n        $('.data-table').each(function() {\n            if (!$.fn.DataTable.isDataTable(this)) {\n                $(this).DataTable({\n                    responsive: true,\n                    pageLength: 10,\n                    lengthMenu: [[10, 25, 50, 100], [10, 25, 50, 100]],\n                    language: {\n                        search: \"Search:\",\n                        lengthMenu: \"Show _MENU_ entries\",\n                        info: \"Showing _START_ to _END_ of _TOTAL_ entries\",\n                        paginate: {\n                            previous: \"Previous\",\n                            next: \"Next\"\n                        }\n                    },\n                    dom: '<\"row\"<\"col-sm-12 col-md-6\"l><\"col-sm-12 col-md-6\"f>>rtip',\n                    columnDefs: [\n                        { orderable: false, targets: 'no-sort' }\n                    ]\n                });\n            }\n        });\n    }\n}\n\n/**\n * Initialize Bootstrap tooltips\n */\nfunction initializeTooltips() {\n    // Initialize tooltips\n    const tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle=\"tooltip\"]'));\n    tooltipTriggerList.map(function(tooltipTriggerEl) {\n        return new bootstrap.Tooltip(tooltipTriggerEl);\n    });\n\n    // Initialize tooltips for buttons with title attributes\n    const titleButtons = document.querySelectorAll('button[title], a[title]');\n    titleButtons.forEach(function(button) {\n        if (!button.hasAttribute('data-bs-toggle')) {\n            button.setAttribute('data-bs-toggle', 'tooltip');\n            new bootstrap.Tooltip(button);\n        }\n    });\n}\n\n/**\n * Initialize form validation\n */\nfunction initializeFormValidation() {\n    // Custom form validation\n    const forms = document.querySelectorAll('.needs-validation');\n\n    Array.prototype.slice.call(forms).forEach(function(form) {\n        form.addEventListener('submit', function(event) {\n            if (!form.checkValidity()) {\n                event.preventDefault();\n                event.stopPropagation();\n            }\n            form.classList.add('was-validated');\n        }, false);\n    });\n\n    // Real-time validation for required fields\n    const requiredFields = document.querySelectorAll('input[required], select[required], textarea[required]');\n    requiredFields.forEach(function(field) {\n        field.addEventListener('blur', function() {\n            validateField(field);\n        });\n\n        field.addEventListener('input', function() {\n            if (field.classList.contains('is-invalid')) {\n                validateField(field);\n            }\n        });\n    });\n}\n\n/**\n * Validate individual form field\n */\nfunction validateField(field) {\n    const isValid = field.checkValidity();\n\n    if (isValid) {\n        field.classList.remove('is-invalid');\n        field.classList.add('is-valid');\n    } else {\n        field.classList.remove('is-valid');\n        field.classList.add('is-invalid');\n    }\n\n    return isValid;\n}\n\n/**\n * Initialize search functionality\n */\nfunction initializeSearch() {\n    // Global search functionality for tables\n    const searchInputs = document.querySelectorAll('input[placeholder*=\"Search\"]');\n\n    searchInputs.forEach(function(searchInput) {\n        const targetTable = searchInput.closest('.card').querySelector('table');\n\n        if (targetTable) {\n            searchInput.addEventListener('input', debounce(function() {\n                performTableSearch(searchInput.value, targetTable);\n            }, 300));\n        }\n    });\n}\n\n/**\n * Perform table search\n */\nfunction performTableSearch(searchTerm, table) {\n    const rows = table.querySelectorAll('tbody tr');\n    const term = searchTerm.toLowerCase().trim();\n\n    rows.forEach(function(row) {\n        const text = row.textContent.toLowerCase();\n        const shouldShow = text.includes(term);\n\n        row.style.display = shouldShow ? '' : 'none';\n\n        // Add highlighting\n        if (shouldShow && term) {\n            highlightSearchTerm(row, term);\n        } else {\n            removeHighlight(row);\n        }\n    });\n\n    // Update \"no results\" message\n    updateNoResultsMessage(table, term);\n}\n\n/**\n * Highlight search terms in table rows\n */\nfunction highlightSearchTerm(row, term) {\n    // Remove existing highlights\n    removeHighlight(row);\n\n    if (!term) return;\n\n    const cells = row.querySelectorAll('td');\n    cells.forEach(function(cell) {\n        const text = cell.textContent;\n        if (text.toLowerCase().includes(term)) {\n            const regex = new RegExp(`(${escapeRegExp(term)})`, 'gi');\n            cell.innerHTML = cell.innerHTML.replace(regex, '<mark class=\"bg-warning\">$1</mark>');\n        }\n    });\n}\n\n/**\n * Remove search highlighting\n */\nfunction removeHighlight(row) {\n    const marks = row.querySelectorAll('mark.bg-warning');\n    marks.forEach(function(mark) {\n        mark.outerHTML = mark.innerHTML;\n    });\n}\n\n/**\n * Update no results message\n */\nfunction updateNoResultsMessage(table, searchTerm) {\n    const tbody = table.querySelector('tbody');\n    const visibleRows = tbody.querySelectorAll('tr[style=\"\"], tr:not([style])');\n    let noResultsRow = tbody.querySelector('.no-results-row');\n\n    if (visibleRows.length === 0 && searchTerm) {\n        if (!noResultsRow) {\n            const colCount = table.querySelectorAll('thead th').length;\n            noResultsRow = document.createElement('tr');\n            noResultsRow.className = 'no-results-row';\n            noResultsRow.innerHTML = `\n                <td colspan=\"${colCount}\" class=\"text-center py-4\">\n                    <i class=\"fas fa-search fa-2x text-muted mb-2\"></i>\n                    <p class=\"text-muted mb-0\">No results found for \"${searchTerm}\"</p>\n                </td>\n            `;\n            tbody.appendChild(noResultsRow);\n        }\n    } else if (noResultsRow) {\n        noResultsRow.remove();\n    }\n}\n\n/**\n * Initialize animations\n */\nfunction initializeAnimations() {\n    // Add fade-in animation to cards\n    const cards = document.querySelectorAll('.card');\n    cards.forEach(function(card, index) {\n        card.style.animationDelay = `${index * 0.1}s`;\n        card.classList.add('fade-in-up');\n    });\n\n    // Add hover effects to interactive elements\n    addHoverEffects();\n}\n\n/**\n * Add hover effects to interactive elements\n */\nfunction addHoverEffects() {\n    // Stat cards hover effect\n    const statCards = document.querySelectorAll('.stat-card');\n    statCards.forEach(function(card) {\n        card.addEventListener('mouseenter', function() {\n            card.style.transform = 'translateY(-5px)';\n        });\n\n        card.addEventListener('mouseleave', function() {\n            card.style.transform = 'translateY(0)';\n        });\n    });\n\n    // Button hover effects\n    const buttons = document.querySelectorAll('.btn');\n    buttons.forEach(function(button) {\n        button.addEventListener('mouseenter', function() {\n            if (!button.disabled) {\n                button.style.transform = 'translateY(-1px)';\n            }\n        });\n\n        button.addEventListener('mouseleave', function() {\n            button.style.transform = 'translateY(0)';\n        });\n    });\n}\n\n/**\n * Utility function to debounce function calls\n */\nfunction debounce(func, wait) {\n    let timeout;\n    return function executedFunction(...args) {\n        const later = () => {\n            clearTimeout(timeout);\n            func(...args);\n        };\n        clearTimeout(timeout);\n        timeout = setTimeout(later, wait);\n    };\n}\n\n/**\n * Escape special characters for regex\n */\nfunction escapeRegExp(string) {\n    return string.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&');\n}\n\n/**\n * Show loading state\n */\nfunction showLoading(element) {\n    const loadingHTML = `\n        <div class=\"d-flex justify-content-center align-items-center py-4\">\n            <div class=\"spinner-border text-primary\" role=\"status\">\n                <span class=\"visually-hidden\">Loading...</span>\n            </div>\n            <span class=\"ms-2\">Loading...</span>\n        </div>\n    `;\n\n    if (element) {\n        element.innerHTML = loadingHTML;\n    }\n}\n\n/**\n * Hide loading state\n */\nfunction hideLoading(element, originalContent) {\n    if (element && originalContent) {\n        element.innerHTML = originalContent;\n    }\n}\n\n/**\n * Show success message\n */\nfunction showSuccessMessage(message, duration = 5000) {\n    showAlert(message, 'success', duration);\n}\n\n/**\n * Show error message\n */\nfunction showErrorMessage(message, duration = 5000) {\n    showAlert(message, 'danger', duration);\n}\n\n/**\n * Show alert message\n */\nfunction showAlert(message, type = 'info', duration = 5000) {\n    const alertHTML = `\n        <div class=\"alert alert-${type} alert-dismissible fade show\" role=\"alert\">\n            ${message}\n            <button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"alert\"></button>\n        </div>\n    `;\n\n    // Find or create alert container\n    let alertContainer = document.querySelector('.alert-container');\n    if (!alertContainer) {\n        alertContainer = document.createElement('div');\n        alertContainer.className = 'alert-container';\n        alertContainer.style.cssText = `\n            position: fixed;\n            top: 20px;\n            right: 20px;\n            z-index: 9999;\n            min-width: 300px;\n        `;\n        document.body.appendChild(alertContainer);\n    }\n\n    // Add alert\n    const alertElement = document.createElement('div');\n    alertElement.innerHTML = alertHTML;\n    alertContainer.appendChild(alertElement.firstElementChild);\n\n    // Auto-dismiss after duration\n    if (duration > 0) {\n        setTimeout(() => {\n            const alert = alertContainer.querySelector('.alert');\n            if (alert) {\n                const bsAlert = new bootstrap.Alert(alert);\n                bsAlert.close();\n            }\n        }, duration);\n    }\n}\n\n/**\n * Format date for display\n */\nfunction formatDate(date, format = 'DD-MM-YYYY') {\n    const d = new Date(date);\n    const day = String(d.getDate()).padStart(2, '0');\n    const month = String(d.getMonth() + 1).padStart(2, '0');\n    const year = d.getFullYear();\n\n    switch (format) {\n        case 'DD-MM-YYYY':\n            return `${day}-${month}-${year}`;\n        case 'MM-DD-YYYY':\n            return `${month}-${day}-${year}`;\n        case 'YYYY-MM-DD':\n            return `${year}-${month}-${day}`;\n        default:\n            return d.toLocaleDateString();\n    }\n}\n\n/**\n * Format number with commas\n */\nfunction formatNumber(num) {\n    return num.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',');\n}\n\n/**\n * Copy text to clipboard\n */\nfunction copyToClipboard(text) {\n    if (navigator.clipboard) {\n        navigator.clipboard.writeText(text).then(() => {\n            showSuccessMessage('Copied to clipboard!');\n        }).catch(() => {\n            fallbackCopyToClipboard(text);\n        });\n    } else {\n        fallbackCopyToClipboard(text);\n    }\n}\n\n/**\n * Fallback copy to clipboard for older browsers\n */\nfunction fallbackCopyToClipboard(text) {\n    const textArea = document.createElement('textarea');\n    textArea.value = text;\n    textArea.style.position = 'fixed';\n    textArea.style.left = '-999999px';\n    textArea.style.top = '-999999px';\n    document.body.appendChild(textArea);\n    textArea.focus();\n    textArea.select();\n\n    try {\n        document.execCommand('copy');\n        showSuccessMessage('Copied to clipboard!');\n    } catch (err) {\n        showErrorMessage('Failed to copy to clipboard');\n    }\n\n    document.body.removeChild(textArea);\n}\n\n/**\n * Download file from URL\n */\nfunction downloadFile(url, filename) {\n    const link = document.createElement('a');\n    link.href = url;\n    link.download = filename || 'download';\n    link.style.display = 'none';\n\n    document.body.appendChild(link);\n    link.click();\n    document.body.removeChild(link);\n}\n\n/**\n * Confirm action with modal\n */\nfunction confirmAction(message, callback, title = 'Confirm Action') {\n    const modalHTML = `\n        <div class=\"modal fade\" id=\"confirmModal\" tabindex=\"-1\">\n            <div class=\"modal-dialog modal-dialog-centered\">\n                <div class=\"modal-content\">\n                    <div class=\"modal-header\">\n                        <h5 class=\"modal-title\">${title}</h5>\n                        <button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"modal\"></button>\n                    </div>\n                    <div class=\"modal-body\">\n                        <p>${message}</p>\n                    </div>\n                    <div class=\"modal-footer\">\n                        <button type=\"button\" class=\"btn btn-secondary\" data-bs-dismiss=\"modal\">Cancel</button>\n                        <button type=\"button\" class=\"btn btn-primary\" id=\"confirmBtn\">Confirm</button>\n                    </div>\n                </div>\n            </div>\n        </div>\n    `;\n\n    // Remove existing modal\n    const existingModal = document.getElementById('confirmModal');\n    if (existingModal) {\n        existingModal.remove();\n    }\n\n    // Add modal to body\n    document.body.insertAdjacentHTML('beforeend', modalHTML);\n\n    // Show modal\n    const modal = new bootstrap.Modal(document.getElementById('confirmModal'));\n    modal.show();\n\n    // Handle confirm button\n    document.getElementById('confirmBtn').addEventListener('click', () => {\n        modal.hide();\n        if (typeof callback === 'function') {\n            callback();\n        }\n    });\n\n    // Clean up on hide\n    document.getElementById('confirmModal').addEventListener('hidden.bs.modal', () => {\n        document.getElementById('confirmModal').remove();\n    });\n}\n\n// Export functions for global use\nwindow.TrustTags = {\n    showSuccessMessage,\n    showErrorMessage,\n    showAlert,\n    showLoading,\n    hideLoading,\n    formatDate,\n    formatNumber,\n    copyToClipboard,\n    downloadFile,\n    confirmAction,\n    debounce\n};\n\n// Add QR Code generation and display functions\n$(document).ready(function() {\n    // Product selection change event\n    $('#productSelect').change(function() {\n        var productId = $(this).val();\n        var batchSelect = $('#batchSelect');\n\n        // Clear batch options\n        batchSelect.empty().append('<option value=\"\">-- Select --</option>');\n\n        if (productId) {\n            // Fetch batches for selected product\n            $.get('/api/batches/' + productId, function(data) {\n                $.each(data, function(index, batch) {\n                    batchSelect.append('<option value=\"' + batch.id + '\">' + \n                                     batch.batch_no + ' (MFG: ' + batch.mfg_date + \n                                     ', EXP: ' + batch.expiry_date + ')</option>');\n                });\n            });\n        }\n    });\n\n    // Auto-generate batch number\n    $('.generate-batch-btn').click(function() {\n        var today = new Date();\n        var batchNo = 'BATCH' + today.getFullYear() + \n                     String(today.getMonth() + 1).padStart(2, '0') + \n                     String(today.getDate()).padStart(2, '0') + \n                     Math.random().toString(36).substr(2, 6).toUpperCase();\n        $('#batchNo').val(batchNo);\n    });\n\n    // QR Code display function\n    window.showQRCode = function(codeType, codeId) {\n        $.get('/show-qr/' + codeType + '/' + codeId, function(data) {\n            $('#qrCodeContainer').html('<img src=\"' + data.qr_image + '\" class=\"img-fluid\" style=\"max-width: 300px;\">');\n            $('#qrCodeData').text(data.qr_data);\n            $('#qrCodeModal').modal('show');\n        }).fail(function() {\n            alert('Error loading QR code');\n        });\n    };\n});","size_bytes":17636},"replit_auth.py":{"content":"\"\"\"\nFull Authentication Module with Login/Signup\nProvides complete authentication functionality using Flask-Login\n\"\"\"\nimport os\nfrom functools import wraps\nfrom flask import Blueprint, render_template, request, redirect, url_for, flash, session\nfrom flask_login import LoginManager, login_user, logout_user, login_required, current_user\nfrom werkzeug.security import generate_password_hash, check_password_hash\nfrom app import app, db\nfrom models import User\n\n# Set up Flask-Login\nlogin_manager = LoginManager()\nlogin_manager.init_app(app)\nlogin_manager.login_view = 'auth.login'\nlogin_manager.login_message = 'Please log in to access this page.'\n\n@login_manager.user_loader\ndef load_user(user_id):\n    try:\n        # Handle both old string IDs and new integer IDs\n        if user_id and user_id.isdigit():\n            return User.query.get(int(user_id))\n        else:\n            # Clear invalid session data from old system\n            return None\n    except (ValueError, TypeError):\n        return None\n\ndef create_default_admin():\n    \"\"\"Create default admin user if it doesn't exist\"\"\"\n    admin = User.query.filter_by(email='admin@gmail.com').first()\n    if not admin:\n        admin = User(\n            email='admin@gmail.com',\n            first_name='System',\n            last_name='Administrator',\n            role='admin'\n        )\n        admin.set_password('admin')\n        db.session.add(admin)\n        db.session.commit()\n        print(\"Default admin user created: admin@gmail.com / admin\")\n\ndef make_replit_blueprint():\n    \"\"\"Create authentication blueprint with login/signup functionality\"\"\"\n    auth_bp = Blueprint('auth', __name__)\n    \n    @auth_bp.route('/login', methods=['GET', 'POST'])\n    def login():\n        if current_user.is_authenticated:\n            return redirect(url_for('dashboard'))\n            \n        if request.method == 'POST':\n            email = request.form.get('email', '').strip().lower()\n            password = request.form.get('password', '')\n            remember = bool(request.form.get('remember'))\n            \n            if not email or not password:\n                flash('Please enter both email and password', 'error')\n                return render_template('auth/login.html')\n            \n            user = User.query.filter_by(email=email).first()\n            \n            if user and user.check_password(password):\n                if user.is_active:\n                    login_user(user, remember=remember)\n                    flash(f'Welcome back, {user.full_name}!', 'success')\n                    next_page = request.args.get('next')\n                    return redirect(next_page or url_for('dashboard'))\n                else:\n                    flash('Your account has been deactivated. Please contact support.', 'error')\n            else:\n                flash('Invalid email or password', 'error')\n        \n        return render_template('auth/login.html')\n    \n    @auth_bp.route('/signup', methods=['GET', 'POST'])\n    def signup():\n        if current_user.is_authenticated:\n            return redirect(url_for('dashboard'))\n            \n        if request.method == 'POST':\n            email = request.form.get('email', '').strip().lower()\n            password = request.form.get('password', '')\n            confirm_password = request.form.get('confirm_password', '')\n            first_name = request.form.get('first_name', '').strip()\n            last_name = request.form.get('last_name', '').strip()\n            \n            # Validation\n            if not all([email, password, first_name]):\n                flash('Please fill in all required fields', 'error')\n                return render_template('auth/signup.html')\n            \n            if password != confirm_password:\n                flash('Passwords do not match', 'error')\n                return render_template('auth/signup.html')\n            \n            if len(password) < 6:\n                flash('Password must be at least 6 characters long', 'error')\n                return render_template('auth/signup.html')\n            \n            # Check if user already exists\n            if User.query.filter_by(email=email).first():\n                flash('An account with this email already exists', 'error')\n                return render_template('auth/signup.html')\n            \n            # Create new user\n            try:\n                user = User(\n                    email=email,\n                    first_name=first_name,\n                    last_name=last_name,\n                    role='user'  # Regular users get 'user' role by default\n                )\n                user.set_password(password)\n                \n                db.session.add(user)\n                db.session.commit()\n                \n                login_user(user)\n                flash(f'Account created successfully! Welcome, {user.full_name}!', 'success')\n                return redirect(url_for('dashboard'))\n                \n            except Exception as e:\n                db.session.rollback()\n                flash('Error creating account. Please try again.', 'error')\n                print(f\"Signup error: {e}\")\n        \n        return render_template('auth/signup.html')\n    \n    @auth_bp.route('/logout')\n    def logout():\n        logout_user()\n        flash('You have been logged out', 'info')\n        return redirect(url_for('index'))\n    \n    return auth_bp\n\ndef require_login(f):\n    \"\"\"Custom login decorator\"\"\"\n    @wraps(f)\n    def decorated_function(*args, **kwargs):\n        if not current_user.is_authenticated:\n            return redirect(url_for('auth.login', next=request.url))\n        return f(*args, **kwargs)\n    return decorated_function\n\ndef require_admin(f):\n    \"\"\"Decorator to require admin role\"\"\"\n    @wraps(f)\n    def decorated_function(*args, **kwargs):\n        if not current_user.is_authenticated:\n            return redirect(url_for('auth.login', next=request.url))\n        if current_user.role != 'admin':\n            flash('Access denied. Admin privileges required.', 'error')\n            return redirect(url_for('dashboard'))\n        return f(*args, **kwargs)\n    return decorated_function\n\n# Alternative to login_required for consistency\ndef login_required_replit(f):\n    \"\"\"Alias for require_login for backward compatibility\"\"\"\n    return require_login(f)","size_bytes":6318},"replit.md":{"content":"# TrustTags - Product Tracking & QR Code Management System\n\n## Project Overview\nTrustTags is a comprehensive product tracking and QR code management system built with Flask. The application helps manufacturers track products through various batch levels with QR code generation and stock management capabilities.\n\n## Architecture\n- **Backend**: Flask with SQLAlchemy ORM\n- **Database**: SQLite (development), PostgreSQL (production)\n- **Authentication**: Flask-Login with simplified authentication for development\n- **Frontend**: Bootstrap 5 with responsive design\n- **QR Code Generation**: qrcode library with PIL\n- **File Handling**: openpyxl for Excel exports\n\n## Key Features\n1. **Batch Management**: Track products through manufacturing batches\n2. **Multi-level QR Codes**: Generate product, first-level, second-level, and shipper codes\n3. **Stock Management**: Inventory tracking with bin status\n4. **Factory Management**: Multiple factory/location support\n5. **Role-based Access**: User and admin roles\n6. **Export Functionality**: Excel export capabilities\n7. **Responsive Dashboard**: Real-time statistics and reporting\n\n## Database Models\n- **User**: Authentication and user management\n- **Factory**: Manufacturing locations\n- **Product**: Product catalog with SKU and GTIN\n- **Batch**: Manufacturing batches with dates and QA status\n- **ProductCode**: Primary QR codes for products\n- **FirstLevelCode**: Inner packaging codes\n- **SecondLevelCode**: Secondary packaging codes\n- **ShipperCode**: Shipping container codes\n- **Stock**: Inventory tracking\n\n## Recent Changes (Migration from Replit Agent)\n**Date**: August 15, 2025\n\n### Migration Changes:\n1. **Package Installation**: Installed all required Python packages via packager tool\n2. **Database Configuration**: \n   - Updated to support both PostgreSQL (production) and SQLite (development)\n   - Added fallback to SQLite when DATABASE_URL is not set\n3. **Authentication System**:\n   - Created simplified authentication module (replit_auth.py)\n   - Replaced complex OAuth with demo user system for development\n   - Updated all template references from `replit_auth.login` to `auth.login`\n4. **Security Configuration**:\n   - Set secure session secret with fallback for development\n   - Maintained proxy fix for HTTPS handling\n5. **Templates Fixed**:\n   - Updated index.html, 403.html, and base.html template references\n   - Fixed authentication URL endpoints\n6. **QR Code System Enhanced**:\n   - Enhanced QR code generation to include fallback data for offline scenarios\n   - Added API endpoint for robust QR code parsing (/api/parse-qr)\n   - Improved scan template with online/offline support\n   - QR codes now work properly across different domains and deployment environments\n\n### Current Status:\n- Application successfully running on port 5000\n- Database tables created automatically\n- Authentication system functional with demo user\n- All templates loading without errors\n- QR code system enhanced for deployment flexibility\n\n## User Preferences\n*User preferences will be documented here as they are expressed*\n\n## Development Notes\n- The application is currently configured with a demo authentication system for development\n- For production deployment, replace the simplified auth system with proper OAuth\n- Database migrations should use Flask-Migrate or similar ORM tools\n- Static files are served from the static/ directory\n- Templates use Jinja2 with Bootstrap 5 for styling\n\n## Environment Variables\n- `DATABASE_URL`: PostgreSQL connection string (optional, falls back to SQLite)\n- `SESSION_SECRET`: Flask session secret key (optional, has development fallback)\n- For production: Add proper OAuth credentials when implementing full authentication\n\n## Deployment Ready\nThe application is now ready for development and testing on Replit. All core functionality should work with the simplified authentication system.","size_bytes":3888}}}